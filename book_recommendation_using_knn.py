# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/freeCodeCamp/boilerplate-book-recommendation-engine/blob/master/fcc_book_recommendation_knn.ipynb
"""

# Import libraries (you may add additional imports but you may not have to; I added the csr_matrix library)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# Get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# Import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})


df_books

df_ratings

# Some basic information can be extracted usinf the describe() and info() pandas methods
df_books.describe()
df_books.info()

df_ratings.describe()
df_ratings.info()

# Calculate user and book rating counts using the groupby()
user_rating_count = df_ratings.groupby('user')['rating'].count().reset_index().rename(columns = {'rating':'users_rotal_rating_count'})
book_rating_count = df_ratings.groupby('isbn')['rating'].count().reset_index().rename(columns = {'rating':'book_total_rating_count'})

# Add to df_ratings
ratings_df = df_ratings.merge(user_rating_count,how='left', left_on='user', right_on='user')
ratings_df = df_ratings.merge(book_rating_count, how='left', left_on='isbn', right_on='isbn')

# Filter data for statistical significance; remove users with less than 200 ratings and books with less than 100 ratings
ratings_df_2 =ratings_df.loc[(ratings_df['users_total_rating_count']>=200) & (ratings_df['book_total_rating_count']>=100)]

books_with_ratings = pd.merge(ratings_df_2, df_books, on='isbn')
print(books_with_ratings)

# Remove duplicates using .drop_duplicates() method
books_with_ratings_2 = books_with_ratings.drop_duplicates(['title', 'user'])
books_with_ratings_2

#Pivoting the Dataframe
books_with_ratings_pivot = pd.pivot_table(data=books_with_ratings_2, 
                                          values='rating', 
                                          index='title', 
                                          columns='user').fillna(0) #fillina NaN values with 0 if any
print(books_with_ratings_pivot)

# Convert to 2D matrıx using csr_matrix to go in the model
books_with_ratings_matrix = csr_matrix(books_with_ratings_pivot.values)

# Train Model using k-neighbors from scikit-learn and fitting it
model_knn = NearestNeighbors(algorithm='auto', metric='cosine')
model_knn.fit(books_with_ratings_matrix)


# Function to return recommended books - this is what will be tested
def get_recommends(book = ""):
  X_train = books_with_ratings_pivot[books_with_ratings_pivot.index == book]
  X_train = X_train.to_numpy().reshape(1,-1)
  distances, indices = model_knn.kneighbors(X,n_neighbors=6)
  recommended_books = []
  for x in reversed(range(1,6)):
      bookrecommended = [books_with_ratings_pivot.index[indices.flatten()[x]], distances.flatten()[x]]
      recommended_books.append(bookrecommended)
  recommended_books = [book, recommended_books]


  return recommended_books

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2): 
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! 🎉🎉🎉🎉🎉")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()